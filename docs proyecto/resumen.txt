-1.	Resumen funcionalidad
El proyecto consiste de un marketplace online es decir, una plataforma web donde distintos usuarios van a poder registrarse como compradores o vendedores, publicar productos, gestionar pedidos realizar compras…
Cada vendedor podrá añadir productos a su catálogo, ver estadísticas de ventas, editar o eliminar sus productos, y responder a mensajes de compradores. 
Los usuarios compradores podrán navegar por el catálogo, añadir productos a su carrito, realizar pedidos y valorar productos tras la compra.

Una lista provisional de funcionalidades sería:
    • Registro y login de usuarios (con roles: usuario, admin). (el rol de admin estará hardcodeado, el rol de 'usuario' se asigna por defecto)
    • Gestión de productos (crear, editar, eliminar, listar) Los administradores pueden realizar estas mismas acciones sobre productos de 
        usuarios desde el panel de administración.
    • Gestión de pedidos y carrito de compras.
    • Panel de usuario personalizado según el rol (panel de usuario o panel administracion).
    • Visualización de estadísticas para vendedores (seguramente lo implemente con un plugin):
        •	Ventas por semana/mes
        •	Productos más vendidos
        •	Media de valoraciones
    • Buscador con filtros (categoría, precio, nombre…)
    • Valoraciones y comentarios de productos así como mensajes entre usuarios.
    • Panel de administración para gestionar usuarios y moderar contenido.
    
-1.5. FLUJO DE LA APLICACION:
    • Al entrar a la Web de VendeYa se mostrará un mensaje de bienvenida, quizás algunos componentes? o publicidad
    junto con unos botones de inicio de sesión y registro (está página podría tener un header distinto para no repetir los botones de inicio y registro),
    Desde aqui, una vez registrado/logeado la página inicial consistirá de: un header con el logo, buscador de productos y unos botones(buzón, icono perfil y un boton para vender) 
    debajo del header un navbar o segundo header para explorar todas las categorías y algunas categorías principales al lado.
    El contenido principal mostrara productos divididos por categorías (podriamos quizas elegir las más vendidas o las que mas productos tengan)
    Se deben mostrar los productos, su nombre, vendedor y precio al clickear en ver detalles, se abrirá la página del producto, donde se podrá ver:
    la descripción completa, las fotos del producto, detalles... y comprarlo.
    Para vender un producto se puede realizar tanto desde el panel de usuario en la seccion de ventas como desde el botón del header.

-2.	Lenguajes y tecnologías
Los lenguajes y tecnologías que voy a utilizar en el proyecto son los siguientes:
-	Frontend:
    o	React (Librería de JS vista en las practicas)
    o	Javascript, HTML, CSS (USANDO BOOTSTRAP)
    o	(OPCIONAL) Plugin/libreria de gráficos para mostrar estadisticas
-	Backend:
    o	PHP 
    o	MySQL
-	Otros:
    o	Git – Github para control de versiones
    o	XAMPP (Para servidor local de desarrollo, aunque estoy buscando opciones de alojamiento en un dominio)

-3: A tener en cuenta:
    o   Nombres de funciones, variables y archivos... en español y con nombres que pudiese escribir un alumno normal de DAW
    o Estructura inicial propuesta:
    src/
├── components/
│   ├── common/           # Componentes reutilizables (botones, inputs, modales...)
│   ├── layout/           # Componentes de estructura (header, footer, sidebar...)
│   └── features/         # Componentes específicos de funcionalidades
│       ├── auth/         # Componentes de autenticación
│       ├── products/     # Componentes de productos
│       ├── cart/         # Componentes del carrito
│       └── admin/        # Componentes del panel de administración
├── pages/                # Páginas principales de la aplicación
│   ├── Inicio/
│   ├── IniciarSesion/
│   ├── Registro/
│   ├── ListaProductos/
│   ├── DetalleProducto/
│   ├── Carrito/
│   └── Administracion/
├── hooks/                # Custom hooks
│   ├── useAutenticacion.jsx
│   ├── useCarrito.jsx
│   └── useProductos.jsx
├── services/            # Servicios para comunicación con el backend
│   ├── servicioAutenticacion.jsx
│   ├── servicioProductos.jsx
│   └── servicioCarrito.jsx
├── utils/               # Funciones utilitarias
│   ├── formateadores.jsx
│   ├── validadores.jsx
│   └── constantes.jsx
├── context/            # Contextos de React
│   ├── ContextoAutenticacion.jsx
│   └── ContextoCarrito.jsx
└── tests/              # Tests unitarios
    ├── unit/
    │   ├── components/
    │   ├── hooks/
    │   └── utils/
    └── integration/

-4 ESTRUCTURA BASE DE DATOS:

A continuación se detalla la estructura completa de la base de datos 'vendeya' con todas sus tablas y campos:

1. Tabla: usuarios
   - id: INT, AUTO_INCREMENT, PRIMARY KEY
   - nombre: VARCHAR(255), NOT NULL
   - email: VARCHAR(255), NOT NULL, UNIQUE
   - password: VARCHAR(255), NOT NULL
   - rol: VARCHAR(50), NOT NULL, DEFAULT 'usuario'
   - created_at: TIMESTAMP, DEFAULT CURRENT_TIMESTAMP

2. Tabla: categorias
   - id: INT, AUTO_INCREMENT, PRIMARY KEY
   - nombre: VARCHAR(255), NOT NULL, UNIQUE
   - descripcion: TEXT
   - parent_id: INT, NULL (referencia a categorias.id para subcategorías)
   - created_at: TIMESTAMP, DEFAULT CURRENT_TIMESTAMP
   - FOREIGN KEY (parent_id) REFERENCES categorias(id) ON DELETE CASCADE

3. Tabla: productos
   - id: INT, AUTO_INCREMENT, PRIMARY KEY
   - nombre: VARCHAR(255), NOT NULL
   - descripcion: TEXT
   - precio: DECIMAL(10, 2), NOT NULL
   - vendedor_id: INT, NOT NULL
   - categoria_id: INT
   - imagen: VARCHAR(255)
   - stock: INT, NOT NULL, DEFAULT 0
   - created_at: TIMESTAMP, DEFAULT CURRENT_TIMESTAMP
   - updated_at: TIMESTAMP, DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
   - FOREIGN KEY (vendedor_id) REFERENCES usuarios(id) ON DELETE CASCADE
   - FOREIGN KEY (categoria_id) REFERENCES categorias(id)

4. Tabla: carrito_items
   - id: INT, AUTO_INCREMENT, PRIMARY KEY
   - usuario_id: INT, NOT NULL
   - producto_id: INT, NOT NULL
   - cantidad: INT, NOT NULL, DEFAULT 1, CHECK (cantidad > 0)
   - created_at: TIMESTAMP, DEFAULT CURRENT_TIMESTAMP
   - FOREIGN KEY (usuario_id) REFERENCES usuarios(id) ON DELETE CASCADE
   - FOREIGN KEY (producto_id) REFERENCES productos(id) ON DELETE CASCADE
   - UNIQUE KEY (usuario_id, producto_id)

5. Tabla: pedidos
   - id: INT, AUTO_INCREMENT, PRIMARY KEY
   - usuario_id: INT, NOT NULL
   - fecha_pedido: TIMESTAMP, DEFAULT CURRENT_TIMESTAMP
   - estado: VARCHAR(50), NOT NULL, DEFAULT 'pendiente'
   - total: DECIMAL(10, 2), NOT NULL
   - FOREIGN KEY (usuario_id) REFERENCES usuarios(id) ON DELETE CASCADE

6. Tabla: pedido_items (¡IMPORTANTE! No confundir con 'pedidos_items')
   - id: INT, AUTO_INCREMENT, PRIMARY KEY
   - pedido_id: INT, NOT NULL
   - producto_id: INT, NOT NULL
   - cantidad: INT, NOT NULL, CHECK (cantidad > 0)
   - precio_unitario: DECIMAL(10, 2), NOT NULL
   - FOREIGN KEY (pedido_id) REFERENCES pedidos(id) ON DELETE CASCADE
   - FOREIGN KEY (producto_id) REFERENCES productos(id) ON DELETE CASCADE

7. Tabla: valoraciones
   - id: INT, AUTO_INCREMENT, PRIMARY KEY
   - producto_id: INT, NOT NULL
   - usuario_id: INT, NOT NULL
   - puntuacion: INT, NOT NULL, CHECK (puntuacion >= 1 AND puntuacion <= 5)
   - comentario: TEXT
   - fecha: TIMESTAMP, DEFAULT CURRENT_TIMESTAMP
   - FOREIGN KEY (producto_id) REFERENCES productos(id) ON DELETE CASCADE
   - FOREIGN KEY (usuario_id) REFERENCES usuarios(id) ON DELETE CASCADE
   - UNIQUE KEY (producto_id, usuario_id)
   - INDEX idx_valoraciones_producto (producto_id)
   - INDEX idx_valoraciones_usuario (usuario_id)
   - UNIQUE INDEX idx_valoraciones_usuario_producto (usuario_id, producto_id)

Notas importantes:
- La tabla de pedidos se relaciona con los productos a través de la tabla intermedia 'pedido_items' (en singular).
- Todas las tablas utilizan claves foráneas con la opción ON DELETE CASCADE para mantener la integridad referencial.
- Los nombres de las tablas están en singular, excepto 'usuarios', 'categorias', 'productos', 'pedidos' y 'valoraciones'.
- La tabla 'carrito_items' tiene una restricción UNIQUE para evitar duplicados de productos en el carrito de un usuario.
- La tabla 'valoraciones' tiene índices para optimizar las búsquedas por producto y usuario.


-5. ESTRUCTURA COMPLETA DEL PROYECTO:

A continuación se detalla la estructura completa del proyecto VendeYa con una breve descripción de cada carpeta y archivo principal:

├── .env                           # Archivo de variables de entorno para configuración
├── .gitignore                     # Archivo para excluir archivos/carpetas del control de versiones
├── CHECKLIST.txt                  # Lista de tareas pendientes y completadas del proyecto
├── README.md                      # Documentación principal del proyecto
├── api/                           # Backend en PHP que gestiona las peticiones al servidor
│   ├── auth/                      # Endpoints de autenticación (login y registro)
│   ├── carrito/                   # Endpoints para gestionar el carrito de compras
│   ├── categorias/                # Endpoints para gestionar categorías de productos
│   ├── config/                    # Configuración de la base de datos
│   ├── mensajes/                  # Endpoints para el sistema de mensajería
│   ├── pedidos/                   # Endpoints para gestionar pedidos
│   ├── productos/                 # Endpoints para gestionar productos
│   ├── utils/                     # Utilidades compartidas para el backend
│   └── valoraciones/              # Endpoints para gestionar valoraciones de productos
├── docs proyecto/                 # Documentación del proyecto
│   └── resumen.txt                # Resumen de funcionalidades y estructura
├── package.json                   # Dependencias y scripts del proyecto
├── public/                        # Archivos públicos accesibles directamente
│   └── imagenes/                  # Imágenes estáticas, incluidas las de productos
├── sql/                           # Scripts SQL para la base de datos
│   └── database_setup.sql         # Script de creación de la base de datos
└── src/                           # Código fuente del frontend (React)
    ├── App.jsx                    # Componente principal de la aplicación
    ├── assets/                    # Recursos estáticos (logos, imágenes)
    ├── components/                # Componentes reutilizables de React
    │   ├── common/                # Componentes genéricos (modales, estados de carga)
    │   ├── features/              # Componentes específicos por funcionalidad
    │   │   ├── auth/              # Componentes de autenticación (login, registro)
    │   │   ├── carrito/           # Componentes del carrito de compras
    │   │   ├── categorias/        # Componentes para gestión de categorías
    │   │   ├── mensajes/          # Componentes del sistema de mensajería
    │   │   ├── pedidos/           # Componentes para visualizar y gestionar pedidos
    │   │   ├── productos/         # Componentes para crear, editar y mostrar productos
    │   │   ├── usuario/           # Componentes del panel de usuario
    │   │   └── ventas/            # Componentes para estadísticas de ventas
    │   └── layout/                # Componentes de estructura (header, footer, navbar)
    ├── context/                   # Contextos de React para estado global
    │   ├── ContextoAutenticacion.jsx  # Gestión del estado de autenticación
    │   ├── ContextoCarrito.jsx    # Gestión del estado del carrito
    │   └── ContextoTema.jsx       # Gestión del tema claro/oscuro
    ├── hooks/                     # Hooks personalizados
    │   ├── useApiCall.js          # Hook para llamadas a la API
    │   ├── useForm.js             # Hook para gestión de formularios
    │   └── useMensajes.js         # Hook para gestión de mensajes
    ├── main.jsx                   # Punto de entrada de la aplicación
    ├── pages/                     # Páginas principales de la aplicación
    │   ├── Bienvenida.jsx         # Página de bienvenida inicial
    │   ├── CarritoPage.jsx        # Página del carrito de compras
    │   ├── DetalleProductoPage.jsx # Página de detalle de producto
    │   ├── ListaProductos.jsx     # Página de listado de productos
    │   ├── MensajesPage.jsx       # Página del sistema de mensajería
    │   └── PanelUsuarioPage.jsx   # Página del panel de usuario
    └── services/                  # Servicios para comunicación con el backend
        ├── servicioBase.js        # Funciones base para peticiones HTTP
        ├── servicioCarrito.jsx    # Funciones para gestionar el carrito
        ├── servicioCategorias.jsx # Funciones para gestionar categorías
        ├── servicioMensajes.jsx   # Funciones para el sistema de mensajería
        ├── servicioPedidos.jsx    # Funciones para gestionar pedidos
        ├── servicioProductos.jsx  # Funciones para gestionar productos
        └── servicioValoraciones.jsx # Funciones para gestionar valoraciones

-6. ESTRUCTURA DOCUMENTACIÓN:

1.Definición del Proyecto
1.1. Descripción General del Proyecto
1.2. Tipos de Empresas. Sectores Productivos

2.Diseño y Fases del Proyecto
2.1. Objetivos. Especificación de Requisitos
2.2. Identificación de las Fases del Proyecto
2.3. Herramientas de Diseño
2.4. Evaluación Económica y Financiación del Proyecto
2.4.1. Estudio de Viabilidad
2.4.2. Conclusión de Viabilidad
2.4.3. Ayudas Económicas y Subvenciones

3.Planificación del Proyecto
3.1. Diagrama de Secuenciación del Proyecto
3.2. Secuenciación de Actividades
3.3. Asignación de Recursos y Tiempos
3.4. Procedimientos en las Actividades
3.5. Prevención de Riesgos

4.Pruebas y Validación del Proyecto
4.1. Evaluación y Seguimiento
4.2. Indicadores de Calidad
4.3. Informe de Evaluación de Incidencias

5.Implantación del Proyecto
5.1. Plan de Implantación
5.2. Manual de Instalación
5.3. Manual de Usuario

6.Conclusión

7.Bibliografía/Webgrafía